from openai import OpenAI

# 创建OpenAI客户端
client = OpenAI(api_key="", base_url="https://api.gptnb.ai/v1")

# 定义六个逻辑模板的描述与示例（模板库）
TEMPLATES = {
    "抽取": {
        "description": "用于从医疗记录中直接抽取结构化信息。",
        "examples": [
            "从医疗记录中直接抽取患者的姓名、性别、年龄、住院号、床号、病区名称、入院日期等信息。",
            "根据医疗文书中的诊断描述，直接提取出院时的诊断信息。",
            "从病历中抽取生命体征信息和病史内容。",
            "从检验检查记录中抽取关键结果，如保留正常检验的最新结果和异常检验的所有结果。",
            "对于手术后的情况，抽取相关治疗信息。",
            "抽取患者的病史和慢性疾病信息。"
        ]
    },
    "摘要": {
        "description": "用于对文本内容进行摘要，提取关键信息。",
        "examples": [
            "对病历中获取的生命体征信息和病史内容进行摘要。",
            "对体检记录进行阅读和分析，提取关键信息并形成摘要。",
            "对治疗过程中的手术情况获取的相关治疗信息进行摘要。"
        ]
    },
    "判断": {
        "description": "用于判断特定的临床情况。",
        "examples": [
            "判断治疗过程中是否进行了手术。",
            "根据患者的恢复情况和医疗记录，判断患者的整体状况。",
            "从获得的患者的病史和慢性疾病信息，判断患者是否有慢性疾病。"
        ]
    },
    "推理": {
        "description": "用于推理基于某些条件的结果。",
        "examples": [
            "根据患者的恢复情况和医疗记录，推理出院时的总体情况。"
            "结合医嘱内容中的出院指示和时间，推理出院日期和时间。"
        ]
    },
    "知识": {
        "description": "基于患者的病史和慢性疾病信息与知识库匹配，提供用药建议。",
        "examples": [
            "根据患者的病史和慢性疾病信息，如果有慢性疾病，则与知识库匹配，得到用药建议；否则不匹配"
        ]
    }
}
#模板库补全

# 请求模型生成字段的处理提示
def generate_field_prompt(field_name):
    # 给模型提供模板库描述
    templates_info = "\n".join([f"模板: {template}\n描述: {details['description']}\n示例: {', '.join(details['examples'])}" for template, details in TEMPLATES.items()])

    # 请求模型根据字段名称推理需要的模板
    prompt = f"""
    你是一个医疗文本处理系统。以下是你只能使用的逻辑模板库：
    
    {templates_info}
    
    现在，我需要处理一个字段：“{field_name}”。
    请根据字段名称判断该字段应该使用哪些模板，从{TEMPLATES}选出所有符合的，不要有多余但是也不能缺少，并生成适合该字段的处理提示。你需要按正确的顺序拼接模板。
    例如，如果字段需要先抽取再推理，则生成：
    先抽取: 从医疗文书中的诊断描述提取出院时的诊断信息。
    再推理: 根据患者的恢复情况和医疗记录，推理出院时的总体情况。
    例如， 基本信息： 从医疗记录中提取患者的姓名、性别、年龄、住院号、床号、病区名称、入院日期等信息，还需要推理出院日期。
    出院诊断：从医疗文书中的诊断描述提取出院时的诊断信息。只有一个逻辑模板
    入院时简要病史: 从病历中提取生命体征信息和病史内容，可能还需要对内容进行摘要。  
    体检摘要: 对体检记录进行分析，提取关键信息并形成摘要。只有一个逻辑模板
    住院期间医疗情况: 从检验检查记录中提取关键结果，比如保留正常检验的最新结果和异常检验的所有结果。 只有一个逻辑模板
    病程与治疗情况: 判断治疗过程中是否进行了手术，然后对于手术后的情况抽取相关治疗信息，最后对治疗过程中的手术情况获取的相关治疗信息进行总结。
    出院时情况: 判断患者整体情况，推断最后出院时的总体情况。     
    出院后用药建议: 获取相关病史和慢性疾病信息，然后判断患者是否有疾病，并结合知识库提供用药建议。

    确保所有的提示都只来自逻辑模板库，**不能自创或添加任何不相关的内容，只要符合的**。
    请根据实际需求生成合适的提示，并保证所有的提示都来自{TEMPLATES}，不可以自己随意生成无关内容，确保所有步骤都按顺序拼接。
    """

    # 向模型请求处理结果
    completion = client.chat.completions.create(
        model="gpt-4o",  # 选择合适的模型
        stream=False,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ]
    )

    return completion.choices[0].message.content


# 示例：请求“出院诊断”字段的处理提示
# 基本信息 出院诊断 入院时简要病史 体检摘要 住院期间医疗情况 病程与治疗情况 出院时情况 出院后用药建议
field_name = "基本信息"
response = generate_field_prompt(field_name)
print(response)
